plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id "com.google.protobuf" version "0.8.12"
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

static def versionCodeDate() {
    return new Date().format("yyyyMMdd").toInteger()
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.example.kaloricketabulkylite"
        minSdk 21
        targetSdk 32
        versionCode versionCodeDate()
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
        useIR = true
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion "1.0.3"
    }

    bundle {
        language {
            // Specifies that the app bundle should not support
            // configuration APKs for language resources. These
            // resources are instead packaged with each base and
            // dynamic feature APK.
            enableSplit = false
        }
    }

    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {

    // androidx
    implementation "androidx.core:core-ktx:1.7.0"

    // splashscreen
    implementation 'androidx.core:core-splashscreen:1.0.0-beta01'

    // FOR ROOM
    implementation 'androidx.room:room-runtime:2.4.2'
    kapt 'androidx.room:room-compiler:2.4.2'

    // optional - Kotlin Extensions and Coroutines support for Room
    implementation 'androidx.room:room-ktx:2.4.2'
    // END FOR ROOM

    // Network
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-simplexml:2.9.0'

    //Hilt
    implementation 'com.google.dagger:hilt-android:2.41'
    kapt 'com.google.dagger:hilt-compiler:2.41'

    //Kotlin Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0-native-mt'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.0-native-mt'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.6.0-native-mt'

    //Timber
    implementation 'com.jakewharton.timber:timber:5.0.1'

    // Coil
    implementation 'io.coil-kt:coil-compose:1.4.0'

    // Compose
    implementation 'androidx.compose.ui:ui:1.1.1'
    implementation 'androidx.compose.material:material:1.1.1'
    implementation 'androidx.compose.material:material-icons-extended:1.1.1'
    implementation 'androidx.compose.runtime:runtime:1.1.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.4.1'
    implementation 'androidx.activity:activity-compose:1.4.0'
    implementation 'androidx.hilt:hilt-navigation-compose:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout-compose:1.0.0'
    implementation 'androidx.compose.compiler:compiler:1.1.1'

    // swipe to refresh
    implementation 'com.google.accompanist:accompanist-swiperefresh:0.24.2-alpha'

    // status bar color changer
    implementation 'com.google.accompanist:accompanist-systemuicontroller:0.24.2-alpha'

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.1'
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.14.0"
    }

    // Generates the java Protobuf-lite code for the Protobuf in this project. See
    // https://github.com/google/protobuf-gradle-plugin#customizing-protobuf-compilation
    // for more information.
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
            }
        }
    }
}